version: '3.8'

services:  
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
    ports:
      - "2181:2181"
    networks:
      - kafka
  
  broker-1:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker-1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
    depends_on:
      - zookeeper
    networks:
      - kafka
    healthcheck:
      test: "bash -c 'printf \"\" > /dev/tcp/127.0.0.1/19092; exit $$?;'"
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 30s

  broker-2:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9093:9093"
      - "29093:29093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker-2:19093,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093,DOCKER://host.docker.internal:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 2
    depends_on:
      - zookeeper
    networks:
      - kafka
    healthcheck:
      test: "bash -c 'printf \"\" > /dev/tcp/127.0.0.1/19093; exit $$?;'"
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 30s

  broker-3:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9094:9094"
      - "29094:29094"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker-3:19094,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094,DOCKER://host.docker.internal:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 3
    depends_on:
      - zookeeper
    networks:
      - kafka
    healthcheck:
      test: "bash -c 'printf \"\" > /dev/tcp/127.0.0.1/19094; exit $$?;'"
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    volumes:
      - ./Services/00_kafka/broker-ui/config.yml:/etc/kafkaui/dynamic_config.yaml
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    depends_on:
      - broker-1
      - broker-2
      - broker-3
    networks:
      - kafka
    ports:
      - '9180:8080'
    healthcheck:
      test: wget --no-verbose --tries=1 --spider localhost:8080 || exit 1
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 30s
  
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9181:9090
    volumes:
      - ./Services/00_kafka/prometheus:/etc/prometheus
      - prom_data:/prometheus
    networks:
      - kafka  
    healthcheck:
      test: wget --no-verbose --tries=1 --spider localhost:9090 || exit 1
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 5s
      
  kafka-exporter:
    image: docker.io/bitnami/kafka-exporter:latest
    depends_on:
      broker-1:
        condition: service_healthy
      broker-2:
        condition: service_healthy
      broker-3:
        condition: service_healthy
    networks:
      - kafka
    command: --kafka.server=broker-1:19092 --kafka.server=broker-2:19093 --kafka.server=broker-3:19094
    healthcheck:
      test: "bash -c 'printf \"\" > /dev/tcp/127.0.0.1/9308; exit $$?;'"
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 5s
      
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - 9182:3000
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./Services/00_kafka/grafana/provisioning:/etc/grafana/provisioning
      - ./Services/00_kafka/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - kafka
    healthcheck:
      test: curl --fail localhost:3000
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 10s

  elasticsearch:
    image: elasticsearch:7.14.0
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elk_data:/usr/share/elasticsearch/data/
      - ./Monitoring/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      - discovery.type=single-node
      - http.host=0.0.0.0
      - transport.host=0.0.0.0
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=false
      - cluster.name=elasticsearch
      - bootstrap.memory_lock=true
    networks:
      - elk

  logstash:
    image: logstash:7.14.0
    container_name: logstash
    ports:
      - "5044:5044"
      - "9600:9600"
    volumes:
      - ./Monitoring/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./Monitoring/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ls_data:/usr/share/logstash/data
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    image: kibana:7.14.0
    container_name: kibana
    ports:
      - "5601:5601"
    volumes:
      - ./Monitoring/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
      - kb_data:/usr/share/kibana/data
    networks:
      - elk
    depends_on:
      - elasticsearch

  filebeat:
    image: elastic/filebeat:7.14.0
    container_name: filebeat
    user: root
    command: ["filebeat", "-e", "--strict.perms=false"]
    volumes:
      - filebeat:/usr/share/filebeat/data
      - ./Monitoring/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/log/syslog:/var/log/syslog:ro
      - /var/log/auth.log:/var/log/auth.log:ro
      - shared-volume:/usr/share/app/logs
    networks:
      - elk
    depends_on:
      - elasticsearch

  gateway:
    image: gateway:1.0
    container_name: gateway
    build:
      context: ./Services/01_gateway
      dockerfile: Dockerfile
    environment:
      NODE_ENV: "development"
      LOG_FOLDER: "logs"
    networks:
      - backend
      - kafka
    ports:
      - '8089:8089'
    volumes:
      - shared-volume:/usr/src/app/logs

  msservice_1:
    image: msservice_1:1.0
    # container_name: msservice_1
    build:
      context: ./Services/02_service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: "development"
      LOG_FOLDER: "logs"
      DATABASE_NAME: "msservice_1"
      DATABASE_URI: "mongodb://service_adm:passwordtest123@mongodb:27017/"
    # ports:
    #   - '9000'
    networks:
      - backend
      - kafka
    depends_on:
      - database
    deploy:
      replicas: 3
    # volumes:
    #   - service1_data:/msservice_1

  # msservice_2:
  #   image: msservice_2:1.0
  #   container_name: msservice_2
  #   build:
  #     context: ./03_service
  #     dockerfile: Dockerfile
  #   environment:
  #     NODE_ENV: "development"
  #     LOG_FOLDER: "logs"
  #     DATABASE_NAME: "msservice_2"
  #     DATABASE_URI: "mongodb://service_adm:passwordtest123@mongodb:27017/"
  #   ports:
  #     - '9001'
  #   networks:
  #     - backend
  #     - kafka
  #   depends_on:
  #     - database
  #   volumes:
  #     - service2_data:/msservice_2

  database:
    image: mongo:6.0
    container_name: mongodb
    restart: always
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: "service_adm"
      MONGO_INITDB_ROOT_PASSWORD: "passwordtest123"
    networks:
      - backend

networks:
  kafka:
  backend:
  elk:
  

volumes:
  gateway_data:
    driver: local
  prom_data:
    driver: local
  elk_data:
    driver: local
  ls_data:
    driver: local
  kb_data:
    driver: local
  filebeat:
    driver: local
  shared-volume:

  
